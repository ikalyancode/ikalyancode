🏆 Cracking the Ramp Frontend CTF Challenge: Step-by-Step Walkthrough
🚀 Overview
I recently attempted and successfully solved the Ramp Frontend Capture The Flag (CTF) challenge. The goal was to find a hidden URL in an HTML page, extract a "flag," and then render it in a React app with a typewriter animation.

This blog details how I approached and cracked the challenge! 🔥

📝 Challenge Breakdown
📌 1. Extract the Hidden URL from the HTML
The first step required finding a hidden URL inside the HTML DOM structure of the challenge page. The challenge instructions provided a pattern:

html
Copy code
<section data-id="92*">
  <article data-class="*45">
    <div data-tag="*78*">
      <b class="ref" value="VALID_CHARACTER"></b>
    </div>
  </article>
</section>
Each valid <b> tag contained a character of the hidden URL, and collecting all of them in order would give the full URL.

👨‍💻 How I Solved It: JavaScript DOM Extraction
I used DevTools in the browser to extract the hidden characters. By running the following JavaScript script in the Console:

js
Copy code
document.querySelectorAll('b.ramp.ref')
  .forEach(el => console.log(el.getAttribute('value')));
Steps I followed:

Opened the challenge URL.
Opened Chrome DevTools → Clicked on Console.
Pasted the script and hit Enter.
The console printed the characters one by one.
Manually joined them together to get the hidden URL.
🚀 Extracted URL:

arduino
Copy code
https://wgg522pwivhvi5gqsn675gth3q0otdja.lambda-url.us-east-1.on.aws/7a6970
📌 2. Build a React App to Fetch and Display the Flag
Now that I had the hidden URL, I needed to fetch the flag (text content) from the link and display it dynamically in a React app.

👨‍💻 How I Built the React App
Used create-react-app to set up the project.
Created a fetch request to load the flag text.
Added a typewriter animation that displayed the text one character at a time.
📂 Final Project Structure
go
Copy code
📦 flag-app
 ┣ 📂 src
 ┃ ┣ 📜 App.js      // Main React component
 ┃ ┣ 📜 index.js    // Entry point
 ┣ 📜 package.json  // Dependencies
 ┗ 📜 README.md     // Write-up (this file!)
🔥 Code Implementation
jsx
Copy code
import React, { useState, useEffect } from "react";

export default function App() {
  const [data, setData] = useState(""); // Holds raw fetched data
  const [flag, setFlag] = useState(""); // Holds validated text data
  const [displayedFlag, setDisplayedFlag] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch data from the extracted URL
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          "https://wgg522pwivhvi5gqsn675gth3q0otdja.lambda-url.us-east-1.on.aws/7a6970"
        );
        const data = await response.text(); // Fetch data as text
        setData(data.trim()); // Store raw data
        setLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Validate and set flag
  useEffect(() => {
    if (data) {
      if (typeof data === "string") {
        setFlag(data);
      } else {
        console.error("Unexpected data format:", data);
      }
    }
  }, [data]);

  // Typewriter effect for displaying flag
  useEffect(() => {
    if (flag) {
      let index = 0;
      const currentFlag = [];

      const interval = setInterval(() => {
        if (index < flag.length) {
          currentFlag.push(flag[index]);
          setDisplayedFlag([...currentFlag]);
          index++;
        } else {
          clearInterval(interval);
        }
      }, 500);

      return () => clearInterval(interval);
    }
  }, [flag]);

  return (
    <div>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <ul>
          {displayedFlag.map((char, index) => (
            <li key={index}>{char}</li>
          ))}
        </ul>
      )}
    </div>
  );
}
📌 3. Bonus: Python Alternative to Extract the URL
If I wanted to extract the hidden URL from an HTML file instead of the browser, I could use Python:

python
Copy code
from bs4 import BeautifulSoup

with open("challenge.html", "r", encoding="utf-8") as file:
    soup = BeautifulSoup(file, "html.parser")

valid_chars = []
for section in soup.find_all("section", attrs={"data-id": lambda x: x and x.startswith("92")}):
    article = section.find("article", attrs={"data-class": lambda x: "45" in x})
    if article:
        div = article.find("div", attrs={"data-tag": lambda x: "78" in x})
        if div:
            b_tag = div.find("b", class_="ramp ref")
            if b_tag and "value" in b_tag.attrs:
                valid_chars.append(b_tag["value"])

hidden_url = "".join(valid_chars)
print(hidden_url)

🎯 Conclusion
This challenge was an amazing mix of frontend skills, problem-solving, and web security concepts. Here's what I learned: 
✅ Extracting hidden data from a webpage using DevTools
✅ Writing JavaScript to traverse the DOM dynamically
✅ Fetching and processing data in React
✅ Creating a typewriter animation using React state
✅ Using Python as an alternative method for extraction


👨‍💻 How You Can Try This
If you want to run this project:

sh
Copy code
git clone https://github.com/yourusername/ramp-flag-challenge.git
cd ramp-flag-challenge
npm install
npm start

🚀 Happy hacking!
